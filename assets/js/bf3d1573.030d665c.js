"use strict";(self.webpackChunkredstone_docs=self.webpackChunkredstone_docs||[]).push([[718],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(a),h=r,u=m["".concat(l,".").concat(h)]||m[h]||p[h]||i;return a?n.createElement(u,o(o({ref:t},c),{},{components:a})):n.createElement(u,o({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6325:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:2,sidebar_label:"\ud83c\udfdb Classic (push model)"},o="\ud83c\udfdb Classic Model",s={unversionedId:"smart-contract-devs/get-started/redstone-classic",id:"smart-contract-devs/get-started/redstone-classic",title:"\ud83c\udfdb Classic Model",description:"Pushing feeds on chain",source:"@site/docs/smart-contract-devs/get-started/redstone-classic.md",sourceDirName:"smart-contract-devs/get-started",slug:"/smart-contract-devs/get-started/redstone-classic",permalink:"/docs/smart-contract-devs/get-started/redstone-classic",draft:!1,editUrl:"https://github.com/redstone-finance/redstone-docs/tree/main/docs/smart-contract-devs/get-started/redstone-classic.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"\ud83c\udfdb Classic (push model)"},sidebar:"tutorialSidebar",previous:{title:"\u2699\ufe0f Core (on-demand feeds)",permalink:"/docs/smart-contract-devs/get-started/redstone-core"},next:{title:"\u23f1 X (no front-running)",permalink:"/docs/smart-contract-devs/get-started/redstone-x"}},l={},d=[{value:"Pushing feeds on chain",id:"pushing-feeds-on-chain",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"Relayer",id:"relayer",level:3},{value:"Contracts",id:"contracts",level:3},{value:"Environment variables",id:"environment-variables",level:3}],c={toc:d};function p(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-classic-model"},"\ud83c\udfdb Classic Model"),(0,r.kt)("h2",{id:"pushing-feeds-on-chain"},"Pushing feeds on chain"),(0,r.kt)("p",null,"Although the pure on-demand fetching model (",(0,r.kt)("a",{parentName:"p",href:"/docs/smart-contract-devs/get-started/redstone-core"},"RedStone Core"),") is more efficient and scalable we acknowledge that some protocols may prefer to stick to a traditional design when data is pushed on-chain. This setup could be reasonable if:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"There is an existing well-audited codebase and the team prefers not to make even tiny amendments "),(0,r.kt)("li",{parentName:"ul"},"The protocol is deployed on a private network or a chain where the gas costs are minimal"),(0,r.kt)("li",{parentName:"ul"},"The prices don't need to be updated too frequently")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"RedStone Classic has significant advantage over traditional push Oracles. Our modular design gives you decisive voice on when and how the price is updated (with other Oracles you have to accept dictated parameters).")),(0,r.kt)("h2",{id:"how-it-works"},"How it works"),(0,r.kt)("p",null,"This approach is built on top of the ",(0,r.kt)("a",{parentName:"p",href:"/docs/smart-contract-devs/get-started/redstone-core"},"RedStone Core")," model maintaining the security of on-chain validation of data providers and timestamps. "),(0,r.kt)("p",null,"The model consists of two main parts. The first one is the off-chain ",(0,r.kt)("a",{parentName:"p",href:"#relayer"},"relayer")," responsible for pushing data on-chain in a customized way using ",(0,r.kt)("a",{parentName:"p",href:"#environment-variables"},"environment variables"),". The second part is the on-chain ",(0,r.kt)("a",{parentName:"p",href:"#contracts"},"contracts")," which enable storing prices and getting them through a familiar interface (e.g. the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol"},"Chainlink Aggregotor")," ). RedStone Classic can be used on all EVM-compatible L1s & L2s + Starknet + Fuel Network."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"RedStone Classic diagram",src:a(5646).Z,width:"1920",height:"1080"})),(0,r.kt)("h3",{id:"relayer"},"Relayer"),(0,r.kt)("p",null,"The relayer is a service that works in a customizable way based on ",(0,r.kt)("a",{parentName:"p",href:"#environment-variables"},"environment variables"),". It periodically checks a defined set of conditions, pushing the prices when they are satisfied. It is possible to pass multiple conditions to the ",(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE_CONDITIONS"),", then the relayer will work in the manner that if any conditions are met prices would be updated. Currently, two conditions are implemented:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"a ",(0,r.kt)("inlineCode",{parentName:"p"},"time")," condition described by ",(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE_PRICE_INTERVAL")," variable in milliseconds, which states how often prices should be updated (aka heartbeat), ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redstone-finance/redstone-oracles-monorepo/blob/main/packages/on-chain-relayer/src/core/update-conditions/time-condition.ts"},"code"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"a ",(0,r.kt)("inlineCode",{parentName:"p"},"value-deviation")," condition described by ",(0,r.kt)("inlineCode",{parentName:"p"},"MIN_DEVIATION_PERCENTAGE")," variable which indicates how much value should change in order to trigger the price update, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redstone-finance/redstone-oracles-monorepo/blob/main/packages/on-chain-relayer/src/core/update-conditions/value-deviation-condition.ts"},"code"),"."))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Relayers are permissionless and anyone could run the service as the data is eventually validated on-chain using conditions defined by the protocol stakeholders. Moreover, the relayers designed to work in parallel and we recommend having multiple (ideally independent) instances to mitigate the risks of a single point of failure and censorship.  ")),(0,r.kt)("h3",{id:"contracts"},"Contracts"),(0,r.kt)("p",null,"The on-chain relayer is based on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redstone-finance/redstone-oracles-monorepo/blob/main/packages/on-chain-relayer/contracts/core/RedstoneAdapterBase.sol"},"PriceFeedsAdapter contract")," which is responsible for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"storing all price feeds' symbols (mappings to RedStone dataFeedId),"),(0,r.kt)("li",{parentName:"ul"},"storing price feeds values,"),(0,r.kt)("li",{parentName:"ul"},"updating price feeds values in batch,"),(0,r.kt)("li",{parentName:"ul"},"storing information regarding the round number and timestamp of the last update,"),(0,r.kt)("li",{parentName:"ul"},"getting prices for multiple feeds' values in a single call.")),(0,r.kt)("p",null,"Additionally, if the protocol wants to be 100% compatible with the Chainlink PriceFeed architecture, it's possible to deploy additional ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redstone-finance/redstone-oracles-monorepo/blob/main/packages/on-chain-relayer/contracts/price-feeds/PriceFeedBase.sol"},"PriceFeed")," contracts to mimic this solution."),(0,r.kt)("h3",{id:"environment-variables"},"Environment variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variable"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"RELAYER_ITERATION_INTERVAL"),(0,r.kt)("td",{parentName:"tr",align:null},"Time interval in which the relayer tries to update prices")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UPDATE_CONDITIONS"),(0,r.kt)("td",{parentName:"tr",align:null},"Array of parameters that describes what decides if prices can be updated, currently acceptable parameters are 'time' and 'value-deviation'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UPDATE_PRICE_INTERVAL"),(0,r.kt)("td",{parentName:"tr",align:null},'Time interval that describes how often prices should be updated if UPDATE_CONDITIONS contains the "time" parameter')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MIN_DEVIATION_PERCENTAGE"),(0,r.kt)("td",{parentName:"tr",align:null},'Minimum deviation of the prices that triggers prices update if UPDATE_CONDITIONS contains "value-deviation"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"RPC_URL"),(0,r.kt)("td",{parentName:"tr",align:null},"URL of RPC for interaction with blockchain")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CHAIN_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"Chain name of the blockchain relayer should work on")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CHAIN_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"Chain id of the blockchain relayer should work on")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PRIVATE_KEY"),(0,r.kt)("td",{parentName:"tr",align:null},"Private key of the wallet with funds on a proper network to push prices to the adapter contract")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ADAPTER_CONTRACT_ADDRESS"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the adapter contract deployed on a proper network")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATA_SERVICE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"RedStone Wrapper parameter that describes what data services should be used to fetch the price")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UNIQUE_SIGNERS_COUNT"),(0,r.kt)("td",{parentName:"tr",align:null},"RedStone Wrapper parameter that describes how many unique signers should sign price data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATA_FEEDS"),(0,r.kt)("td",{parentName:"tr",align:null},"RedStone Wrapper parameter that describes what tokens will be used")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CACHE_SERVICE_URLS"),(0,r.kt)("td",{parentName:"tr",align:null},"RedStone Wrapper parameter that describes what cache services URLs will be used to fetch the price")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GAS_LIMIT"),(0,r.kt)("td",{parentName:"tr",align:null},"Gas limit used to push data to the price feed contract")))),(0,r.kt)("p",null,"Examples of environment variables already working can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/on-chain-relayer/deployed-config"},"here"),"."))}p.isMDXComponent=!0},5646:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/redstone-classic-d5aaf3a5f726a71c54dad3d14be62d01.png"}}]);